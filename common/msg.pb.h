// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace XuMQ {
class BasicProperties;
struct BasicPropertiesDefaultTypeInternal;
extern BasicPropertiesDefaultTypeInternal _BasicProperties_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_Payload;
struct Message_PayloadDefaultTypeInternal;
extern Message_PayloadDefaultTypeInternal _Message_Payload_default_instance_;
}  // namespace XuMQ
PROTOBUF_NAMESPACE_OPEN
template<> ::XuMQ::BasicProperties* Arena::CreateMaybeMessage<::XuMQ::BasicProperties>(Arena*);
template<> ::XuMQ::Message* Arena::CreateMaybeMessage<::XuMQ::Message>(Arena*);
template<> ::XuMQ::Message_Payload* Arena::CreateMaybeMessage<::XuMQ::Message_Payload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XuMQ {

enum ExchangeType : int {
  UNKNOWTYPE = 0,
  DIRECT = 1,
  FANOUT = 2,
  TOPIC = 3,
  ExchangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ExchangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ExchangeType_IsValid(int value);
constexpr ExchangeType ExchangeType_MIN = UNKNOWTYPE;
constexpr ExchangeType ExchangeType_MAX = TOPIC;
constexpr int ExchangeType_ARRAYSIZE = ExchangeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExchangeType_descriptor();
template<typename T>
inline const std::string& ExchangeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExchangeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExchangeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExchangeType_descriptor(), enum_t_value);
}
inline bool ExchangeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExchangeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExchangeType>(
    ExchangeType_descriptor(), name, value);
}
enum DeliveryMode : int {
  UNKNOWMODE = 0,
  UNDURABLE = 1,
  DURABLE = 2,
  DeliveryMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DeliveryMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DeliveryMode_IsValid(int value);
constexpr DeliveryMode DeliveryMode_MIN = UNKNOWMODE;
constexpr DeliveryMode DeliveryMode_MAX = DURABLE;
constexpr int DeliveryMode_ARRAYSIZE = DeliveryMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeliveryMode_descriptor();
template<typename T>
inline const std::string& DeliveryMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeliveryMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeliveryMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeliveryMode_descriptor(), enum_t_value);
}
inline bool DeliveryMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeliveryMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeliveryMode>(
    DeliveryMode_descriptor(), name, value);
}
// ===================================================================

class BasicProperties final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuMQ.BasicProperties) */ {
 public:
  inline BasicProperties() : BasicProperties(nullptr) {}
  ~BasicProperties() override;
  explicit PROTOBUF_CONSTEXPR BasicProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasicProperties(const BasicProperties& from);
  BasicProperties(BasicProperties&& from) noexcept
    : BasicProperties() {
    *this = ::std::move(from);
  }

  inline BasicProperties& operator=(const BasicProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicProperties& operator=(BasicProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BasicProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasicProperties* internal_default_instance() {
    return reinterpret_cast<const BasicProperties*>(
               &_BasicProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BasicProperties& a, BasicProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicProperties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasicProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BasicProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BasicProperties>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BasicProperties& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BasicProperties& from) {
    BasicProperties::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicProperties* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuMQ.BasicProperties";
  }
  protected:
  explicit BasicProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRoutingKeyFieldNumber = 3,
    kDeliveryModeFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string routing_key = 3;
  void clear_routing_key();
  const std::string& routing_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_routing_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_routing_key();
  PROTOBUF_NODISCARD std::string* release_routing_key();
  void set_allocated_routing_key(std::string* routing_key);
  private:
  const std::string& _internal_routing_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routing_key(const std::string& value);
  std::string* _internal_mutable_routing_key();
  public:

  // .XuMQ.DeliveryMode delivery_mode = 2;
  void clear_delivery_mode();
  ::XuMQ::DeliveryMode delivery_mode() const;
  void set_delivery_mode(::XuMQ::DeliveryMode value);
  private:
  ::XuMQ::DeliveryMode _internal_delivery_mode() const;
  void _internal_set_delivery_mode(::XuMQ::DeliveryMode value);
  public:

  // @@protoc_insertion_point(class_scope:XuMQ.BasicProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routing_key_;
    int delivery_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Message_Payload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuMQ.Message.Payload) */ {
 public:
  inline Message_Payload() : Message_Payload(nullptr) {}
  ~Message_Payload() override;
  explicit PROTOBUF_CONSTEXPR Message_Payload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_Payload(const Message_Payload& from);
  Message_Payload(Message_Payload&& from) noexcept
    : Message_Payload() {
    *this = ::std::move(from);
  }

  inline Message_Payload& operator=(const Message_Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Payload& operator=(Message_Payload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_Payload& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_Payload* internal_default_instance() {
    return reinterpret_cast<const Message_Payload*>(
               &_Message_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message_Payload& a, Message_Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Payload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Payload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_Payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_Payload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_Payload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message_Payload& from) {
    Message_Payload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Payload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuMQ.Message.Payload";
  }
  protected:
  explicit Message_Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kValidFieldNumber = 3,
    kPropertiesFieldNumber = 1,
  };
  // string body = 2;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // string valid = 3;
  void clear_valid();
  const std::string& valid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valid();
  PROTOBUF_NODISCARD std::string* release_valid();
  void set_allocated_valid(std::string* valid);
  private:
  const std::string& _internal_valid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valid(const std::string& value);
  std::string* _internal_mutable_valid();
  public:

  // .XuMQ.BasicProperties properties = 1;
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::XuMQ::BasicProperties& properties() const;
  PROTOBUF_NODISCARD ::XuMQ::BasicProperties* release_properties();
  ::XuMQ::BasicProperties* mutable_properties();
  void set_allocated_properties(::XuMQ::BasicProperties* properties);
  private:
  const ::XuMQ::BasicProperties& _internal_properties() const;
  ::XuMQ::BasicProperties* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      ::XuMQ::BasicProperties* properties);
  ::XuMQ::BasicProperties* unsafe_arena_release_properties();

  // @@protoc_insertion_point(class_scope:XuMQ.Message.Payload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valid_;
    ::XuMQ::BasicProperties* properties_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XuMQ.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XuMQ.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Message_Payload Payload;

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kLengthFieldNumber = 3,
  };
  // .XuMQ.Message.Payload payload = 1;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::XuMQ::Message_Payload& payload() const;
  PROTOBUF_NODISCARD ::XuMQ::Message_Payload* release_payload();
  ::XuMQ::Message_Payload* mutable_payload();
  void set_allocated_payload(::XuMQ::Message_Payload* payload);
  private:
  const ::XuMQ::Message_Payload& _internal_payload() const;
  ::XuMQ::Message_Payload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::XuMQ::Message_Payload* payload);
  ::XuMQ::Message_Payload* unsafe_arena_release_payload();

  // uint32 offset = 2;
  void clear_offset();
  uint32_t offset() const;
  void set_offset(uint32_t value);
  private:
  uint32_t _internal_offset() const;
  void _internal_set_offset(uint32_t value);
  public:

  // uint32 length = 3;
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XuMQ.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::XuMQ::Message_Payload* payload_;
    uint32_t offset_;
    uint32_t length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BasicProperties

// string id = 1;
inline void BasicProperties::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BasicProperties::id() const {
  // @@protoc_insertion_point(field_get:XuMQ.BasicProperties.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BasicProperties::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuMQ.BasicProperties.id)
}
inline std::string* BasicProperties::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:XuMQ.BasicProperties.id)
  return _s;
}
inline const std::string& BasicProperties::_internal_id() const {
  return _impl_.id_.Get();
}
inline void BasicProperties::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BasicProperties::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* BasicProperties::release_id() {
  // @@protoc_insertion_point(field_release:XuMQ.BasicProperties.id)
  return _impl_.id_.Release();
}
inline void BasicProperties::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuMQ.BasicProperties.id)
}

// .XuMQ.DeliveryMode delivery_mode = 2;
inline void BasicProperties::clear_delivery_mode() {
  _impl_.delivery_mode_ = 0;
}
inline ::XuMQ::DeliveryMode BasicProperties::_internal_delivery_mode() const {
  return static_cast< ::XuMQ::DeliveryMode >(_impl_.delivery_mode_);
}
inline ::XuMQ::DeliveryMode BasicProperties::delivery_mode() const {
  // @@protoc_insertion_point(field_get:XuMQ.BasicProperties.delivery_mode)
  return _internal_delivery_mode();
}
inline void BasicProperties::_internal_set_delivery_mode(::XuMQ::DeliveryMode value) {
  
  _impl_.delivery_mode_ = value;
}
inline void BasicProperties::set_delivery_mode(::XuMQ::DeliveryMode value) {
  _internal_set_delivery_mode(value);
  // @@protoc_insertion_point(field_set:XuMQ.BasicProperties.delivery_mode)
}

// string routing_key = 3;
inline void BasicProperties::clear_routing_key() {
  _impl_.routing_key_.ClearToEmpty();
}
inline const std::string& BasicProperties::routing_key() const {
  // @@protoc_insertion_point(field_get:XuMQ.BasicProperties.routing_key)
  return _internal_routing_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BasicProperties::set_routing_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.routing_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuMQ.BasicProperties.routing_key)
}
inline std::string* BasicProperties::mutable_routing_key() {
  std::string* _s = _internal_mutable_routing_key();
  // @@protoc_insertion_point(field_mutable:XuMQ.BasicProperties.routing_key)
  return _s;
}
inline const std::string& BasicProperties::_internal_routing_key() const {
  return _impl_.routing_key_.Get();
}
inline void BasicProperties::_internal_set_routing_key(const std::string& value) {
  
  _impl_.routing_key_.Set(value, GetArenaForAllocation());
}
inline std::string* BasicProperties::_internal_mutable_routing_key() {
  
  return _impl_.routing_key_.Mutable(GetArenaForAllocation());
}
inline std::string* BasicProperties::release_routing_key() {
  // @@protoc_insertion_point(field_release:XuMQ.BasicProperties.routing_key)
  return _impl_.routing_key_.Release();
}
inline void BasicProperties::set_allocated_routing_key(std::string* routing_key) {
  if (routing_key != nullptr) {
    
  } else {
    
  }
  _impl_.routing_key_.SetAllocated(routing_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.routing_key_.IsDefault()) {
    _impl_.routing_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuMQ.BasicProperties.routing_key)
}

// -------------------------------------------------------------------

// Message_Payload

// .XuMQ.BasicProperties properties = 1;
inline bool Message_Payload::_internal_has_properties() const {
  return this != internal_default_instance() && _impl_.properties_ != nullptr;
}
inline bool Message_Payload::has_properties() const {
  return _internal_has_properties();
}
inline void Message_Payload::clear_properties() {
  if (GetArenaForAllocation() == nullptr && _impl_.properties_ != nullptr) {
    delete _impl_.properties_;
  }
  _impl_.properties_ = nullptr;
}
inline const ::XuMQ::BasicProperties& Message_Payload::_internal_properties() const {
  const ::XuMQ::BasicProperties* p = _impl_.properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::XuMQ::BasicProperties&>(
      ::XuMQ::_BasicProperties_default_instance_);
}
inline const ::XuMQ::BasicProperties& Message_Payload::properties() const {
  // @@protoc_insertion_point(field_get:XuMQ.Message.Payload.properties)
  return _internal_properties();
}
inline void Message_Payload::unsafe_arena_set_allocated_properties(
    ::XuMQ::BasicProperties* properties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.properties_);
  }
  _impl_.properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XuMQ.Message.Payload.properties)
}
inline ::XuMQ::BasicProperties* Message_Payload::release_properties() {
  
  ::XuMQ::BasicProperties* temp = _impl_.properties_;
  _impl_.properties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XuMQ::BasicProperties* Message_Payload::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:XuMQ.Message.Payload.properties)
  
  ::XuMQ::BasicProperties* temp = _impl_.properties_;
  _impl_.properties_ = nullptr;
  return temp;
}
inline ::XuMQ::BasicProperties* Message_Payload::_internal_mutable_properties() {
  
  if (_impl_.properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::XuMQ::BasicProperties>(GetArenaForAllocation());
    _impl_.properties_ = p;
  }
  return _impl_.properties_;
}
inline ::XuMQ::BasicProperties* Message_Payload::mutable_properties() {
  ::XuMQ::BasicProperties* _msg = _internal_mutable_properties();
  // @@protoc_insertion_point(field_mutable:XuMQ.Message.Payload.properties)
  return _msg;
}
inline void Message_Payload::set_allocated_properties(::XuMQ::BasicProperties* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.properties_;
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(properties);
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:XuMQ.Message.Payload.properties)
}

// string body = 2;
inline void Message_Payload::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& Message_Payload::body() const {
  // @@protoc_insertion_point(field_get:XuMQ.Message.Payload.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_Payload::set_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuMQ.Message.Payload.body)
}
inline std::string* Message_Payload::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:XuMQ.Message.Payload.body)
  return _s;
}
inline const std::string& Message_Payload::_internal_body() const {
  return _impl_.body_.Get();
}
inline void Message_Payload::_internal_set_body(const std::string& value) {
  
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_Payload::_internal_mutable_body() {
  
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_Payload::release_body() {
  // @@protoc_insertion_point(field_release:XuMQ.Message.Payload.body)
  return _impl_.body_.Release();
}
inline void Message_Payload::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuMQ.Message.Payload.body)
}

// string valid = 3;
inline void Message_Payload::clear_valid() {
  _impl_.valid_.ClearToEmpty();
}
inline const std::string& Message_Payload::valid() const {
  // @@protoc_insertion_point(field_get:XuMQ.Message.Payload.valid)
  return _internal_valid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_Payload::set_valid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.valid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XuMQ.Message.Payload.valid)
}
inline std::string* Message_Payload::mutable_valid() {
  std::string* _s = _internal_mutable_valid();
  // @@protoc_insertion_point(field_mutable:XuMQ.Message.Payload.valid)
  return _s;
}
inline const std::string& Message_Payload::_internal_valid() const {
  return _impl_.valid_.Get();
}
inline void Message_Payload::_internal_set_valid(const std::string& value) {
  
  _impl_.valid_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_Payload::_internal_mutable_valid() {
  
  return _impl_.valid_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_Payload::release_valid() {
  // @@protoc_insertion_point(field_release:XuMQ.Message.Payload.valid)
  return _impl_.valid_.Release();
}
inline void Message_Payload::set_allocated_valid(std::string* valid) {
  if (valid != nullptr) {
    
  } else {
    
  }
  _impl_.valid_.SetAllocated(valid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.valid_.IsDefault()) {
    _impl_.valid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XuMQ.Message.Payload.valid)
}

// -------------------------------------------------------------------

// Message

// .XuMQ.Message.Payload payload = 1;
inline bool Message::_internal_has_payload() const {
  return this != internal_default_instance() && _impl_.payload_ != nullptr;
}
inline bool Message::has_payload() const {
  return _internal_has_payload();
}
inline void Message::clear_payload() {
  if (GetArenaForAllocation() == nullptr && _impl_.payload_ != nullptr) {
    delete _impl_.payload_;
  }
  _impl_.payload_ = nullptr;
}
inline const ::XuMQ::Message_Payload& Message::_internal_payload() const {
  const ::XuMQ::Message_Payload* p = _impl_.payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::XuMQ::Message_Payload&>(
      ::XuMQ::_Message_Payload_default_instance_);
}
inline const ::XuMQ::Message_Payload& Message::payload() const {
  // @@protoc_insertion_point(field_get:XuMQ.Message.payload)
  return _internal_payload();
}
inline void Message::unsafe_arena_set_allocated_payload(
    ::XuMQ::Message_Payload* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payload_);
  }
  _impl_.payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XuMQ.Message.payload)
}
inline ::XuMQ::Message_Payload* Message::release_payload() {
  
  ::XuMQ::Message_Payload* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XuMQ::Message_Payload* Message::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:XuMQ.Message.payload)
  
  ::XuMQ::Message_Payload* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
  return temp;
}
inline ::XuMQ::Message_Payload* Message::_internal_mutable_payload() {
  
  if (_impl_.payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::XuMQ::Message_Payload>(GetArenaForAllocation());
    _impl_.payload_ = p;
  }
  return _impl_.payload_;
}
inline ::XuMQ::Message_Payload* Message::mutable_payload() {
  ::XuMQ::Message_Payload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:XuMQ.Message.payload)
  return _msg;
}
inline void Message::set_allocated_payload(::XuMQ::Message_Payload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.payload_;
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(payload);
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:XuMQ.Message.payload)
}

// uint32 offset = 2;
inline void Message::clear_offset() {
  _impl_.offset_ = 0u;
}
inline uint32_t Message::_internal_offset() const {
  return _impl_.offset_;
}
inline uint32_t Message::offset() const {
  // @@protoc_insertion_point(field_get:XuMQ.Message.offset)
  return _internal_offset();
}
inline void Message::_internal_set_offset(uint32_t value) {
  
  _impl_.offset_ = value;
}
inline void Message::set_offset(uint32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:XuMQ.Message.offset)
}

// uint32 length = 3;
inline void Message::clear_length() {
  _impl_.length_ = 0u;
}
inline uint32_t Message::_internal_length() const {
  return _impl_.length_;
}
inline uint32_t Message::length() const {
  // @@protoc_insertion_point(field_get:XuMQ.Message.length)
  return _internal_length();
}
inline void Message::_internal_set_length(uint32_t value) {
  
  _impl_.length_ = value;
}
inline void Message::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:XuMQ.Message.length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XuMQ

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::XuMQ::ExchangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XuMQ::ExchangeType>() {
  return ::XuMQ::ExchangeType_descriptor();
}
template <> struct is_proto_enum< ::XuMQ::DeliveryMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XuMQ::DeliveryMode>() {
  return ::XuMQ::DeliveryMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
